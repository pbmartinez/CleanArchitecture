@page "/peripherals"
@using Application.Dtos
@using BlazorApp.Pages.Skeletons
@using BlazorApp.Services
@using Domain.Localization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Newtonsoft.Json
@attribute [Authorize]

@inject ISnackbar Snackbar
@inject IDialogService Dialog
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IStringLocalizer<Resource> Localizer
@inject HttpInterceptorService Interceptor


@if (!IsComponent)
{
    <PageTitle>@Localizer[Resource.page_GridPeripherals]</PageTitle>
    <MudText Typo="Typo.h3" GutterBottom="true">@Localizer[Resource.PeripheralDto]</MudText>
}
<MudText Class="mb-8">@(string.Format( Localizer[Resource.display_ListOfXXX], Localizer[Resource.PeripheralDtos]))</MudText>


<br />
<MudCard Elevation="2">
    @if (Peripherals == null)
    {
        <SkeletonGrid />
    }
    else
    {
        <MudTable Items="Peripherals" Hover="true" SortLabel="Sort By" Elevation="0" MultiSelection="false" Dense="true"
              Filter="new Func<PeripheralDto,bool>(FilterFunc1)">
            <ToolBarContent>
                <MudTooltip Text=@Localizer[Resource.btn_Add]>
                    <MudIconButton @onclick="Add" Icon="@Icons.Material.Filled.Add" Color=Color.Inherit></MudIconButton>
                </MudTooltip>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder=@Localizer[Resource.display_Buscar]
                    Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                    Class="mt-0">
                </MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<PeripheralDto, object>(x=>x.Vendor)">@Localizer[Resource.PeripheralDtoVendor]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<PeripheralDto, object>(x=>x.CreatedDate)">@Localizer[Resource.PeripheralDtoCreatedDate]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<PeripheralDto, object>(x=>x.Status)">@Localizer[Resource.PeripheralDtoStatus]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<PeripheralDto, object>(x=>x.Gateway.Name)">@Localizer[Resource.PeripheralDtoGatewayId]</MudTableSortLabel></MudTh>
                <MudTh>@Localizer[Resource.display_Actions]</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel=@Localizer[Resource.PeripheralDtoVendor]>@context.Vendor</MudTd>
                <MudTd DataLabel=@Localizer[Resource.PeripheralDtoCreatedDate]>@context.CreatedDate</MudTd>
                <MudTd DataLabel=@Localizer[Resource.PeripheralDtoStatus]>@context.Status</MudTd>
                <MudTd DataLabel=@Localizer[Resource.PeripheralDtoStatus]>@context.Gateway.Name</MudTd>
                <MudTd DataLabel="">                                        
                    <MudTooltip Text=@Localizer[Resource.btn_Details]>
                        <MudFab @onclick="@(()=>Show(context))" Color=Color.Default Icon="@Icons.Material.Filled.Visibility" Size=Size.Small> </MudFab>
                    </MudTooltip>
                    <MudTooltip Text=@Localizer[Resource.btn_Edit]>
                        <MudFab @onclick="@(()=>Edit(context))" Color=Color.Warning Icon="@Icons.Material.Filled.Edit" Size=Size.Small> </MudFab>
                    </MudTooltip>
                    <MudTooltip Text=@Localizer[Resource.btn_Delete]>
                        <MudFab @onclick="@(()=>Delete(context))" Color=Color.Error Icon="@Icons.Material.Filled.Delete" Size=Size.Small> </MudFab>
                    </MudTooltip>
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{10, 25, 50}" />
            </PagerContent>
        </MudTable>
    }
</MudCard>



@code {
    [Parameter]
    public Guid? GatewayId { get; set; }
    [Parameter]
    public bool IsComponent { get; set; }
    private List<PeripheralDto>? Peripherals ;
    private IDialogReference? dialogReference;
    private string searchString = "";
    private DialogOptions dialogOptions = new DialogOptions { CloseButton = true};
    public void Dispose() => Interceptor.DisposeEvent();
    protected override async Task OnInitializedAsync()
    { 
        Interceptor.RegisterEvent();
        await UpdateGridAsync();
    }

    private async Task UpdateGridAsync()
    {
        if(GatewayId == null || GatewayId == Guid.Empty)
            Peripherals = await Http.GetFromJsonAsync<List<PeripheralDto>>("api/peripheral") ?? new List<PeripheralDto>();        
        else
            Peripherals = await Http.GetFromJsonAsync<List<PeripheralDto>>($"api/gateway/{GatewayId.Value}/peripheral") ?? new List<PeripheralDto>();        
    }

    private void OnCancelled()
    {
        dialogReference?.Close();
    }
    private async Task OnSuccessfullySaveAsync()
    {
        dialogReference?.Close();
        await UpdateGridAsync();
        StateHasChanged();
    }
    private async Task OnSuccessfullyDeletedAsync()
    {
        dialogReference?.Close();
        await UpdateGridAsync();
        StateHasChanged();
    }
    private void SuccessfullySave() => Task.FromResult( OnSuccessfullySaveAsync());
    private void SuccessfullyDelete() => Task.FromResult(OnSuccessfullySaveAsync());

    private DialogParameters SetParametersForShow()
    {
        var parameters = new DialogParameters();
        parameters.Add("OnSuccessfullySaveAsync", () => SuccessfullySave());
        parameters.Add("OnSuccessfullyDeletedAsync", () => SuccessfullyDelete());
        parameters.Add("OnCancelled", () => OnCancelled());
        return parameters;
    }    
    private async Task Show(PeripheralDto pivot) 
    {
        var item = await Http.GetFromJsonAsync<PeripheralDto>($"/api/peripheral/{pivot.Id}");
        if (item == null)
        {
            Snackbar.Add(Localizer[Resource.message_ItemDoesNotExist], Severity.Warning);
            await UpdateGridAsync();
        }
        else
        {
            var parameters = SetParametersForShow();
            parameters.Add("item", item);
            parameters.Add("ShowMode", true);
            dialogReference = Dialog.Show<ShowPeripheral>("",parameters, dialogOptions);
        }
    }
    private void Add()
    {
        var parameters = SetParametersForShow();
        parameters.Add("item", new PeripheralDto());
        parameters.Add("AddMode", true);
        dialogReference = Dialog.Show<ShowPeripheral>("", parameters, dialogOptions);
        
    }
    private async Task Edit(PeripheralDto pivot)
    {
        var item = await Http.GetFromJsonAsync<PeripheralDto>($"/api/peripheral/{pivot.Id}");
        if (item == null)
        {
            Snackbar.Add(Localizer[Resource.message_ItemDoesNotExist], Severity.Warning);
            await UpdateGridAsync();
        }
        else
        {            
            var parameters = SetParametersForShow();
            parameters.Add("item", item);
            parameters.Add("EditMode", true);
            dialogReference = Dialog.Show<ShowPeripheral>("", parameters, dialogOptions);        
        }
    }
    private async Task Delete(PeripheralDto pivot)
    {
        var item = await Http.GetFromJsonAsync<PeripheralDto>($"/api/peripheral/{pivot.Id}");
        if (item == null)
        {
            Snackbar.Add(Localizer[Resource.message_ItemDoesNotExist], Severity.Warning);
            await UpdateGridAsync();
        }
        else
        {
            var parameters = SetParametersForShow();
            parameters.Add("item", item);
            parameters.Add("DeleteMode", true);
            dialogReference = Dialog.Show<ShowPeripheral>("",parameters,dialogOptions);            
        }
    }

    private bool FilterFunc1(PeripheralDto item) => FilterFunc(item, searchString);

    private bool FilterFunc(PeripheralDto item, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString) || string.IsNullOrEmpty(searchString))
            return true;
        if (item.Vendor.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ((item.CreatedDate.ToShortDateString()).Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ((item.Status.ToString()).Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ((item.Gateway.Name).Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
