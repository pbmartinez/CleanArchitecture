@using Application.Dtos
@using Application.DataAnnotations
@using BlazorApp.Services
@using Domain.Localization
@using Microsoft.Extensions.Localization
@using System
@using System.Net
@using System.Net.Http


@inject ISnackbar Snackbar
@inject IStringLocalizer<Resource> Localizer
@inject HttpClient Http
@inject HttpInterceptorService Interceptor

<MudCard Elevation="2">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@CardHeader</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudForm @bind-IsValid="@success" >
            <MudGrid>

                <MudItem xs="6" sm="4">
                    <MudTextField @bind-Value=@(item.Vendor) Disabled=@(disabled) Label="@Localizer[Resource.PeripheralDtoVendor]" Margin="Margin.Normal" Placeholder="@($"{Localizer[Resource.PeripheralDtoVendor]} ...")"
                                  Required="true" RequiredError="@Localizer[Resource.validation_FieldRequired]">
                    </MudTextField>
                </MudItem>

                
                <MudItem xs="6" sm="4">  
                    <MudDatePicker @bind-Date="item.CreatedDateHelper" Disabled=@(disabledDate) Label="@Localizer[Resource.PeripheralDtoCreatedDate]" Margin="Margin.Normal" Placeholder="@($"{Localizer[Resource.PeripheralDtoCreatedDate]} ...")"
                                Required="true" RequiredError="@Localizer[Resource.validation_FieldRequired]" />
                    
                </MudItem>


                <MudItem xs="6" sm="4">                    
                    <MudSwitch @bind-Checked="@item.Status" Label="@Localizer[Resource.PeripheralDtoStatus]" Color="Color.Primary">

                    </MudSwitch>
                </MudItem>
                
                <MudItem xs="6" sm="4">                    
                    <MudSelect T="Guid" @bind-Value="item.GatewayId" Strict=true Label="@Localizer[Resource.PeripheralDtoGatewayId]" AnchorOrigin="Origin.BottomCenter" 
                               AdornmentIcon="@Icons.Filled.DeviceHub"
                               Validation="@(new Func<Guid, Task<List<string>>>(async a => await ValidateGateway(a)))"
                               
                               Required="true" RequiredError="@Localizer[Resource.validation_FieldRequired]">
                        
                        @foreach (var gateway in Gateways)
                        {
                            <MudSelectItem Value="@gateway.Id">@gateway.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>


            </MudGrid>
            <br />


            @if (ShowMode)
            {
                <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Default">@Localizer[Resource.btn_Cancel]</MudButton>
                <MudButton OnClick="ChangeToEditMode" Variant="Variant.Filled" Color="Color.Warning">@Localizer[Resource.btn_Edit]</MudButton>
                <MudButton OnClick="ChangeToDeleteMode" Variant="Variant.Filled" Color="Color.Error">@Localizer[Resource.btn_Delete]</MudButton>
            }
            @if (AddMode)
            {
                <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Default">@Localizer[Resource.btn_Cancel]</MudButton>
                <MudButton OnClick="AddAsync" Variant="Variant.Filled" Color="Color.Success" Disabled="@(!success)">@Localizer[Resource.btn_Save]</MudButton>
            }
            @if (EditMode)
            {
                <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Default">@Localizer[Resource.btn_Cancel]</MudButton>
                <MudButton OnClick="ChangeToShowMode" Variant="Variant.Filled" Color="Color.Info">@Localizer[Resource.btn_Details]</MudButton>
                <MudButton OnClick="EditAsync" Variant="Variant.Filled" Color="Color.Success" Disabled="@(!success)">@Localizer[Resource.btn_Save]</MudButton>
                <MudButton OnClick="ChangeToDeleteMode" Variant="Variant.Filled" Color="Color.Error">@Localizer[Resource.btn_Delete]</MudButton>
            }
            @if (DeleteMode)
            {
                <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Default">@Localizer[Resource.btn_Cancel]</MudButton>
                <MudButton OnClick="ChangeToShowMode" Variant="Variant.Filled" Color="Color.Info">@Localizer[Resource.btn_Details]</MudButton>
                <MudButton OnClick="ChangeToEditMode" Variant="Variant.Filled" Color="Color.Warning">@Localizer[Resource.btn_Edit]</MudButton>
                <MudButton OnClick="DeleteAsync" Variant="Variant.Filled" Color="Color.Error">@Localizer[Resource.btn_Delete]</MudButton>
            }
        </MudForm>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public PeripheralDto item { get; set; } = new PeripheralDto();

    [Parameter]
    public Action OnSuccessfullySaveAsync { get; set; } = () => { };

    [Parameter]
    public Action OnSuccessfullyDeletedAsync { get; set; }= () => { };

    [Parameter]
    public Action OnCancelled { get; set; } = () => { };

    [Parameter]
    public bool EditMode { get; set; }

    [Parameter]
    public bool DeleteMode { get; set; }

    [Parameter]
    public bool ShowMode { get; set; }

    [Parameter]
    public bool AddMode { get; set; }

    private bool success = false;

    private bool disabled => ShowMode || DeleteMode;
    private bool disabledDate => ShowMode || DeleteMode || EditMode;

    private string CardHeader = string.Empty;
    private List<GatewayDto> Gateways = new List<GatewayDto>();

    private void UpdateCardHeader()
    {
        if (EditMode)
            CardHeader = Localizer[Resource.display_AddEdit];
        else if (DeleteMode)
            CardHeader = Localizer[Resource.display_ConfirmOnDelete];
        else
            CardHeader = Localizer[Resource.btn_Details];
    }

    protected override void OnParametersSet()
    {
        var justOneFlag = ShowMode ^ DeleteMode ^ EditMode ^ AddMode;
        if (!justOneFlag)
            throw new ArgumentException(Localizer[Resource.Exception_MultipleModeOnShowView]);
    }
    public void Dispose() => Interceptor.DisposeEvent();
    protected override async Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();
        await UpdateAsync();
        UpdateCardHeader();
    }
    private async Task UpdateAsync()
    { 
        var updatedGateways = await Http.GetFromJsonAsync<List<GatewayDto>>("/api/gateway");
        Gateways = updatedGateways ?? new List<GatewayDto>();
    }
    private void Cancel()
    {
        OnCancelled.Invoke();
    }
    
    private async Task<List<string>> ValidateGateway(Guid gatewayId)
    {
        var listaErrores = await Http.GetFromJsonAsync<List<string>>($"/api/gateway/{gatewayId}/validate");
        return listaErrores ?? new List<string>();
    }
    private async Task DeleteAsync()
    {
        if (item == null || item.Id == Guid.Empty)
        {
            Snackbar.Add(Localizer[Resource.message_ItemDoesNotExist], Severity.Warning);
        }
        else
        {
            var itemToDelete = await Http.GetFromJsonAsync<PeripheralDto>($"api/peripheral/{item.Id}");

            if (itemToDelete == null)
            {
                Snackbar.Add(Localizer[Resource.message_ItemDoesNotExist], Severity.Warning);
            }
            else
            {
                var result = await Http.DeleteAsync($"api/peripheral/{item.Id}");
                if (result.StatusCode == HttpStatusCode.NoContent)
                {
                    Snackbar.Add(Localizer[Resource.message_SuccesfullyDeleted], Severity.Success);
                    OnSuccessfullyDeletedAsync.Invoke();
                }
                //TODO: Handle fail on Delete
            }
        }
    }
    private async Task EditAsync()
    {
        var itemToEdit = await Http.GetFromJsonAsync<PeripheralDto>($"api/peripheral/{item.Id}");

        if (itemToEdit == null)
        {
            Snackbar.Add(Localizer[Resource.message_ItemDoesNotExist], Severity.Warning);
        }
        else
        {
            var result = await Http.PutAsJsonAsync<PeripheralDto>($"api/peripheral/{item.Id}", item);
            if (result.StatusCode == HttpStatusCode.NoContent)
            {
                Snackbar.Add(Localizer[Resource.message_SuccesfullyEdited], Severity.Success);
                OnSuccessfullySaveAsync.Invoke();
            }
            //TODO: Handle fail on Edit
        }
    }
    private async Task AddAsync()
    {
        item.CreatedDate = item.CreatedDateHelper != null ? item.CreatedDateHelper.Value : DateTime.Today;
        var result = await Http.PostAsJsonAsync<PeripheralDto>($"api/peripheral", item);
        if (result.StatusCode == HttpStatusCode.Created || result.StatusCode == HttpStatusCode.OK)
        {
            Snackbar.Add(Localizer[Resource.message_SuccesfullyAdded], Severity.Success);
            OnSuccessfullySaveAsync.Invoke();
        }
        //TODO: Handle fail on Add
        var response = result.Content.ReadAsStringAsync();
    }


    private void ChangeToEditMode()
    {
        EditMode = true;
        DeleteMode = false;
        ShowMode = false;
        AddMode = false;
        UpdateCardHeader();
    }
    private void ChangeToDeleteMode()
    {
        EditMode = false;
        DeleteMode = true;
        ShowMode = false;
        AddMode = false;
        UpdateCardHeader();
    }
    private void ChangeToShowMode()
    {
        EditMode = false;
        DeleteMode = false;
        ShowMode = true;
        AddMode = false;
        UpdateCardHeader();
    }
    private void ChangeToAddMode()
    {
        EditMode = false;
        DeleteMode = false;
        ShowMode = false;
        AddMode = true;
        UpdateCardHeader();
    }

}
